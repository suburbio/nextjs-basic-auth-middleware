{"version":3,"file":"nextjs-basic-auth-middleware.cjs.production.min.js","sources":["../src/path.ts","../src/index.ts","../src/credentials.ts"],"sourcesContent":["import { parse } from 'url'\nimport { IncomingMessage } from 'http'\n\nexport const pathInRequest = (paths: string[], req: IncomingMessage) => {\n  if (req.url === undefined) {\n    console.log('request url is undefined')\n    return false\n  }\n\n  const path = parse(req.url).pathname\n  return paths.some(item => path?.startsWith(item))\n}\n","import { IncomingMessage, ServerResponse } from 'http'\nimport auth from 'basic-auth'\n\nimport {\n  compareCredentials,\n  parseCredentials,\n  AuthCredentials,\n} from './credentials'\nimport { pathInRequest } from './path'\n\nexport type MiddlewareOptions = {\n  realm?: string\n  users?: AuthCredentials\n  includePaths?: string[]\n  excludePaths?: string[]\n}\n\n/**\n * Middleware that sends a basic auth challenge to the user when enabled\n * @param req Http server incoming message\n * @param res Server response\n */\nconst basicAuthMiddleware = async (\n  req: IncomingMessage,\n  res: ServerResponse,\n  {\n    realm = 'protected',\n    users = [],\n    includePaths = ['/'],\n    excludePaths = [],\n  }: MiddlewareOptions\n) => {\n  // Check if credentials are set up\n  const environmentCredentials = process.env.BASIC_AUTH_CREDENTIALS || ''\n  if (environmentCredentials.length === 0 && users.length === 0) {\n    // No credentials set up, continue rendering the page as normal\n    return\n  }\n\n  // Retrieve paths from environment credentials or use arguments\n  const includeAuth = process.env.BASIC_AUTH_PATHS\n    ? process.env.BASIC_AUTH_PATHS.split(';')\n    : includePaths\n  const excludeAuth = process.env.BASIC_AUTH_EXCLUDE_PATHS\n    ? process.env.BASIC_AUTH_EXCLUDE_PATHS.split(';')\n    : excludePaths\n\n  // Check whether the path of the request should even be checked\n  if (pathInRequest(excludeAuth, req) || !pathInRequest(includeAuth, req)) {\n    // Current path not part of the checked settings\n    return\n  }\n\n  const credentialsObject: AuthCredentials =\n    environmentCredentials.length > 0\n      ? parseCredentials(environmentCredentials)\n      : users\n\n  const currentUser = auth(req)\n  if (!currentUser || !compareCredentials(currentUser, credentialsObject)) {\n    res.statusCode = 401\n    res.setHeader('WWW-Authenticate', `Basic realm=\"${realm}\"`)\n    res.end('401 Access Denied')\n  }\n}\n\nexport default basicAuthMiddleware\n","import auth from 'basic-auth'\nimport compare from 'tsscmp'\n\n// This contains all the logic for parsing and checking credentials\ntype AuthCredentialsObject = {\n  name: string\n  password: string\n}\n\nexport type AuthCredentials = AuthCredentialsObject[]\n\nexport const parseCredentials = (credentials: string): AuthCredentials => {\n  const authCredentials: AuthCredentials = []\n\n  credentials.split('|').forEach(item => {\n    if (item.length < 3) {\n      throw new Error(\n        `Received incorrect basic auth syntax, use <username>:<password>, received ${item}`\n      )\n    }\n    const parsedCredentials = item.split(':')\n    if (\n      parsedCredentials[0].length === 0 ||\n      parsedCredentials[1].length === 0\n    ) {\n      throw new Error(\n        `Received incorrect basic auth syntax, use <username>:<password>, received ${item}`\n      )\n    }\n\n    authCredentials.push({\n      name: parsedCredentials[0],\n      password: parsedCredentials[1],\n    })\n  })\n\n  return authCredentials\n}\n\n/**\n * Compares the basic auth credentials with the configured user and password\n * @param credentials Basic Auth credentials object from `basic-auth`\n */\nexport const compareCredentials = (\n  user: auth.BasicAuthResult,\n  requiredCredentials: AuthCredentials\n): boolean => {\n  let valid = false\n\n  requiredCredentials.forEach(item => {\n    if (compare(item.name, user.name) && compare(item.password, user.pass)) {\n      valid = true\n    }\n  })\n  return valid\n}\n"],"names":["pathInRequest","paths","req","undefined","url","console","log","path","parse","pathname","some","item","startsWith","res","user","valid","authCredentials","realm","users","includePaths","excludePaths","environmentCredentials","process","env","BASIC_AUTH_CREDENTIALS","length","includeAuth","BASIC_AUTH_PATHS","split","excludeAuth","BASIC_AUTH_EXCLUDE_PATHS","credentialsObject","forEach","Error","parsedCredentials","push","name","password","currentUser","auth","compare","pass","statusCode","setHeader","end"],"mappings":"iNAGaA,EAAgB,SAACC,EAAiBC,WAC7BC,IAAZD,EAAIE,WACNC,QAAQC,IAAI,6BACL,MAGHC,EAAOC,QAAMN,EAAIE,KAAKK,gBACrBR,EAAMS,MAAK,SAAAC,UAAQJ,MAAAA,SAAAA,EAAMK,WAAWD,gCCa3CT,EACAW,SCoBAC,EAGIC,EAnCEC,MDcJC,MAAAA,aAAQ,kBACRC,MAAAA,aAAQ,SACRC,aAAAA,aAAe,CAAC,WAChBC,aAAAA,aAAe,aAIXC,EAAyBC,QAAQC,IAAIC,wBAA0B,MAC/B,IAAlCH,EAAuBI,QAAiC,IAAjBP,EAAMO,oCAM3CC,EAAcJ,QAAQC,IAAII,iBAC5BL,QAAQC,IAAII,iBAAiBC,MAAM,KACnCT,EACEU,EAAcP,QAAQC,IAAIO,yBAC5BR,QAAQC,IAAIO,yBAAyBF,MAAM,KAC3CR,KAGApB,EAAc6B,EAAa3B,KAASF,EAAc0B,EAAaxB,gCAK7D6B,EACJV,EAAuBI,OAAS,GC1C5BT,EAAmC,GD2ClBK,ECzCXO,MAAM,KAAKI,SAAQ,SAAArB,MACzBA,EAAKc,OAAS,QACV,IAAIQ,mFACqEtB,OAG3EuB,EAAoBvB,EAAKiB,MAAM,QAEH,IAAhCM,EAAkB,GAAGT,QACW,IAAhCS,EAAkB,GAAGT,aAEf,IAAIQ,mFACqEtB,GAIjFK,EAAgBmB,KAAK,CACnBC,KAAMF,EAAkB,GACxBG,SAAUH,EAAkB,QAIzBlB,GDoBDE,EAEAoB,EAAcC,EAAKrC,UACpBoC,ICfLxB,EDewCwB,ECZpCvB,GAAQ,EDYyCgB,ECVjCC,SAAQ,SAAArB,GACtB6B,EAAQ7B,EAAKyB,KAAMtB,EAAKsB,OAASI,EAAQ7B,EAAK0B,SAAUvB,EAAK2B,QAC/D1B,GAAQ,MAGLA,KDMLF,EAAI6B,WAAa,IACjB7B,EAAI8B,UAAU,mCAAoC1B,OAClDJ,EAAI+B,IAAI"}