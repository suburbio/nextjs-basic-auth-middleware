{"version":3,"file":"nextjs-basic-auth-middleware.cjs.development.js","sources":["../src/credentials.ts","../src/path.ts","../src/index.ts"],"sourcesContent":["import auth from 'basic-auth'\nimport compare from 'tsscmp'\n\n// This contains all the logic for parsing and checking credentials\ntype AuthCredentialsObject = {\n  name: string\n  password: string\n}\n\nexport type AuthCredentials = AuthCredentialsObject[]\n\nexport const parseCredentials = (credentials: string): AuthCredentials => {\n  const authCredentials: AuthCredentials = []\n\n  credentials.split('|').forEach(item => {\n    if (item.length < 3) {\n      throw new Error(\n        `Received incorrect basic auth syntax, use <username>:<password>, received ${item}`\n      )\n    }\n    const parsedCredentials = item.split(':')\n    if (\n      parsedCredentials[0].length === 0 ||\n      parsedCredentials[1].length === 0\n    ) {\n      throw new Error(\n        `Received incorrect basic auth syntax, use <username>:<password>, received ${item}`\n      )\n    }\n\n    authCredentials.push({\n      name: parsedCredentials[0],\n      password: parsedCredentials[1],\n    })\n  })\n\n  return authCredentials\n}\n\n/**\n * Compares the basic auth credentials with the configured user and password\n * @param credentials Basic Auth credentials object from `basic-auth`\n */\nexport const compareCredentials = (\n  user: auth.BasicAuthResult,\n  requiredCredentials: AuthCredentials\n): boolean => {\n  let valid = false\n\n  requiredCredentials.forEach(item => {\n    if (compare(item.name, user.name) && compare(item.password, user.pass)) {\n      valid = true\n    }\n  })\n  return valid\n}\n","import { parse } from 'url'\nimport { IncomingMessage } from 'http'\n\nexport const pathInRequest = (paths: string[], req: IncomingMessage) => {\n  if (req.url === undefined) {\n    console.log('request url is undefined')\n    return false\n  }\n\n  const path = parse(req.url).pathname\n  return paths.some(item => path?.startsWith(item))\n}\n","import { IncomingMessage, ServerResponse } from 'http'\nimport auth from 'basic-auth'\n\nimport {\n  compareCredentials,\n  parseCredentials,\n  AuthCredentials,\n} from './credentials'\nimport { pathInRequest } from './path'\n\nexport type MiddlewareOptions = {\n  realm?: string\n  users?: AuthCredentials\n  includePaths?: string[]\n  excludePaths?: string[]\n}\n\n/**\n * Middleware that sends a basic auth challenge to the user when enabled\n * @param req Http server incoming message\n * @param res Server response\n */\nconst basicAuthMiddleware = async (\n  req: IncomingMessage,\n  res: ServerResponse,\n  {\n    realm = 'protected',\n    users = [],\n    includePaths = ['/'],\n    excludePaths = [],\n  }: MiddlewareOptions\n) => {\n  // Check if credentials are set up\n  const environmentCredentials = process.env.BASIC_AUTH_CREDENTIALS || ''\n  if (environmentCredentials.length === 0 && users.length === 0) {\n    // No credentials set up, continue rendering the page as normal\n    return\n  }\n\n  // Retrieve paths from environment credentials or use arguments\n  const includeAuth = process.env.BASIC_AUTH_PATHS\n    ? process.env.BASIC_AUTH_PATHS.split(';')\n    : includePaths\n  const excludeAuth = process.env.BASIC_AUTH_EXCLUDE_PATHS\n    ? process.env.BASIC_AUTH_EXCLUDE_PATHS.split(';')\n    : excludePaths\n\n  // Check whether the path of the request should even be checked\n  if (pathInRequest(excludeAuth, req) || !pathInRequest(includeAuth, req)) {\n    // Current path not part of the checked settings\n    return\n  }\n\n  const credentialsObject: AuthCredentials =\n    environmentCredentials.length > 0\n      ? parseCredentials(environmentCredentials)\n      : users\n\n  const currentUser = auth(req)\n  if (!currentUser || !compareCredentials(currentUser, credentialsObject)) {\n    res.statusCode = 401\n    res.setHeader('WWW-Authenticate', `Basic realm=\"${realm}\"`)\n    res.end('401 Access Denied')\n  }\n}\n\nexport default basicAuthMiddleware\n"],"names":["parseCredentials","credentials","authCredentials","split","forEach","item","length","Error","parsedCredentials","push","name","password","compareCredentials","user","requiredCredentials","valid","compare","pass","pathInRequest","paths","req","url","undefined","console","log","path","parse","pathname","some","startsWith","basicAuthMiddleware","res","realm","users","includePaths","excludePaths","environmentCredentials","process","env","BASIC_AUTH_CREDENTIALS","includeAuth","BASIC_AUTH_PATHS","excludeAuth","BASIC_AUTH_EXCLUDE_PATHS","credentialsObject","currentUser","auth","statusCode","setHeader","end"],"mappings":"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"}